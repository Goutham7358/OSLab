alias functionNum R1;
alias currentPID R2;

if(functionNum == 8) then
	while([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
		multipush(R1,R2);
		call MOD_5;
		multipop(R1,R2);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	return;
endif;
if(functionNum == 9) then
	if(currentPID != [TERMINAL_STATUS_TABLE + 1]) then
		alias retValue R0;
		retValue = -1;
		return;
	endif;
	[TERMINAL_STATUS_TABLE] = 0;
	alias counter R3;
	counter =1;
	while(counter<=15) do
		if([PROCESS_TABLE + counter*16 + 4] == WAIT_TERMINAL) then
			[PROCESS_TABLE + counter*16 +4] = READY;
		endif;
		counter = counter + 1;
	endwhile;
	alias retValue R0;
	retValue = 0;
	return;
endif;

if(functionNum==3) then
	
	while([DISK_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
		call MOD_5;
	endwhile;
	
	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;
	print("DoneATF3MOD0");
	return;
endif;	

if(functionNum==6) then // Acquire Semaphore
	alias counter R6;
	counter=0;
	alias semaphoreID R0;
	while(counter<32) do
		if([SEMAPHORE_TABLE+4*counter+1]==0) then
			[SEMAPHORE_TABLE+4*counter]=-1;
			[SEMAPHORE_TABLE+4*counter+1]=1;
			semaphoreID=counter;
			print("AllocatedSEMID");
			print(semaphoreID);
			print([SEMAPHORE_TABLE+4*counter]);
			return;
		endif;
		counter=counter+1;
	endwhile;
	print("Semtable filled dude!");
	semaphoreID=-1;
	return;
endif;
print("for f7");
print(functionNum);
if(functionNum==7) then
	alias semID R3;
	print("Yo");
	print(semID);
	print([SEMAPHORE_TABLE+4*semID]);
	print(currentPID);
	print("***************");
	if([SEMAPHORE_TABLE+4*semID]==currentPID) then
		[SEMAPHORE_TABLE+4*semID]=-1;
		alias counter R6;
		counter=0;
		print("GonnaLoop");
		while(counter<16) do
			if(([PROCESS_TABLE+counter*16+4]==WAIT_SEMAPHORE)&&([PROCESS_TABLE+counter*16+5]==semID)) then
				[PROCESS_TABLE+counter*16+4]=READY;	
			endif;
			counter=counter+1;	
		endwhile;
	endif;
	[SEMAPHORE_TABLE+4*semID+1]=[SEMAPHORE_TABLE+4*semID+1]-1;
	return;	
endif;	
